close all; clear all; clc;
addpath('../field_ii')
field_init(-1)
% Transducer parameters
f0=5e6; BW=0.7; N_el=128; %5 MHz, 128 element linear array w/ lamda pitch, 70% BW, 6.5 F number
elv_focus=0.04; elv_fnum=6.5; kerf_fraction=0.05;
focus=[0 0 elv_focus]; %focus at 4 cm depth

% General parameters
c=1540; fs=100e6; % speed of sound c and ultrasound sampling f (default fs)

% Derived parameters
lambda=c/f0;
pitch=lambda/2;
el_height=elv_focus/elv_fnum; % element height (size in y direction)
el_width=(1-kerf_fraction)*pitch; % element width (x direction)
el_kerf=kerf_fraction*pitch;
n_sub_x=ceil(el_width/(lambda/2));
n_sub_y=ceil(el_height/(lambda/2));

% Create transmit and receive arrays
tx=xdc_focused_array(N_el,el_width,el_height,el_kerf,elv_focus,n_sub_x,n_sub_y,focus);
rx=xdc_focused_array(N_el,el_width,el_height,el_kerf,elv_focus,n_sub_x,n_sub_y,focus);

% Set impulse responses
tc=gauspuls('cutoff',f0,BW); % Note: default BWR -6 dB and TPE -60 dB
imp_resp=gauspuls(-tc:1/fs:tc,f0,BW);
xdc_impulse(tx,imp_resp); 
xdc_impulse(rx,imp_resp);

% positions_pts=[zeros(6,2) (1:6)']*1e-2; %create point targets spaced 1 cm from 1 to 6 cm on z axis
z_array= (10:5:80).*1e-3;
x=(-0.6:0.01:0.6).*1e-2;
foc_z=elv_focus;

for i = 1:length(z_array)
    position=[0 0 z_array(i)];
    amplitude=10;
    rf=[];start=[];
    for nn=1:length(x) %sweeping beam to image
%         xdc_center_focus(tx,[x(nn) 0 0]); % Make sure to set center first, then focus
%         xdc_focus(tx,0,[x(nn) 0 foc_z]);
        xdc_center_focus(rx,[x(nn) 0 0]);
        xdc_dynamic_focus(rx,0,0,0);
        [temp,start(nn)]=calc_scat(tx,rx,position,amplitude);
        rf(1:length(temp),nn)=temp; % store the rf data generated by calc_scat
    end
    
    min_start=min(start);
    for nn=1:size(rf,2), % shift all RF signals appropriately to generate image
        temp=[zeros(round((start(nn)-min_start)*fs),1);rf(:,nn)];
        temp_rf(1:length(temp),nn)=temp;
    end
    rf=temp_rf; clear temp_rf;
    
    env=abs(hilbert(rf)); % envelope calculation
    env_db=20*log10(env/max(env(:))); % log scale from 0 to - infinity dB
    z=(min_start+(1:size(env_db,1))/fs) * 1540/2; % determine z axis values
    
    figure(1)
    imagesc(x*100,z*100,env_db,[-40 0]);axis image; colormap gray; % dynamic range set at 60 dB vs original 40 dB
    xlabel('x (cm)'),ylabel('z (cm)');
    
%     figure(2)
%     hold on
%     [c1tmp,h1] = contour(x*100,z*100,env_db,[-6 -6]);
%     [c2tmp,h2] = contour(x*100,z*100,env_db,[-12 -12]);
%     hold off
%     grid on
%     tmp_i=find(c1tmp(1,:)~=-6);
%     c1=c1tmp(:,tmp_i);
%     tmp_i = find(c2tmp(1,:)~=-12);
%     c2=c2tmp(:,tmp_i);
%     fw6db(i)=max(c1(1,:))-min(c1(1,:))
%     fw12db(i)=max(c2(1,:))-min(c2(1,:))
%     figure(3)
%     hold on
%     plot(c1(1,:),c1(2,:))
%     plot(c2(1,:),c2(2,:))
%     hold off
%     grid on
    pause(0.1)
end
% 
% figure
% hold on
% p1=plot(z_array*100,fw6db,'linewidth',2);
% p2=plot(z_array*100,fw12db,'r','linewidth',2);
% grid on
% hold off
% xlabel('Depth (cm)')
% ylabel('Lateral Resolution (cm)')





% 
% figure
% c1 = contour(x,z,env_db,[-3 -6]);
% grid on 
% % clabel(c1)
xdc_free(tx); xdc_free(rx);
field_end